# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ecrlZHknz0wtgVnndTxipl_1TlLwV-f2
"""

# app.py
import streamlit as st
import pandas as pd
import joblib

# Load model
@st.cache_resource
def load_model():
    return joblib.load('decision_tree_model.joblib')

# Prediction function
def predict_heart_disease(input_data):
    model = load_model()
    prediction = model.predict(input_data)[0]
    probability = model.predict_proba(input_data)[0][1]
    return prediction, probability

# Main app
def main():
    st.title("Heart Disease Risk Prediction")
    st.write("This app predicts the risk of heart disease using a Decision Tree model.")

    # Input form
    st.sidebar.header("Patient Information")

    age = st.sidebar.number_input("Age", min_value=20, max_value=100, value=50)
    sex = st.sidebar.selectbox("Sex", ["Male", "Female"])
    cp = st.sidebar.selectbox(
        "Chest Pain Type",
        ["Typical angina", "Atypical angina", "Non-anginal pain", "Asymptomatic"]
    )
    trestbps = st.sidebar.number_input(
        "Resting Blood Pressure (mm Hg)",
        min_value=80, max_value=200, value=120
    )
    chol = st.sidebar.number_input(
        "Serum Cholesterol (mg/dl)",
        min_value=100, max_value=600, value=200
    )
    fbs = st.sidebar.selectbox(
        "Fasting Blood Sugar > 120 mg/dl",
        ["No", "Yes"]
    )
    restecg = st.sidebar.selectbox(
        "Resting Electrocardiographic Results",
        ["Normal", "ST-T wave abnormality", "Probable left ventricular hypertrophy"]
    )
    thalach = st.sidebar.number_input(
        "Maximum Heart Rate Achieved",
        min_value=60, max_value=220, value=150
    )
    exang = st.sidebar.selectbox(
        "Exercise Induced Angina",
        ["No", "Yes"]
    )
    oldpeak = st.sidebar.number_input(
        "ST Depression Induced by Exercise",
        min_value=0.0, max_value=6.2, value=1.0, step=0.1
    )
    slope = st.sidebar.selectbox(
        "Slope of Peak Exercise ST Segment",
        ["Upsloping", "Flat", "Downsloping"]
    )
    ca = st.sidebar.number_input(
        "Number of Major Vessels Colored by Fluoroscopy",
        min_value=0, max_value=4, value=0
    )
    thal = st.sidebar.selectbox(
        "Thalassemia",
        ["Normal", "Fixed defect", "Reversible defect", "Unknown"]
    )

    # Convert inputs to model format
    input_dict = {
        'age': age,
        'sex': 1 if sex == "Male" else 0,
        'cp': ["Typical angina", "Atypical angina", "Non-anginal pain", "Asymptomatic"].index(cp),
        'trestbps': trestbps,
        'chol': chol,
        'fbs': 1 if fbs == "Yes" else 0,
        'restecg': ["Normal", "ST-T wave abnormality", "Probable left ventricular hypertrophy"].index(restecg),
        'thalach': thalach,
        'exang': 1 if exang == "Yes" else 0,
        'oldpeak': oldpeak,
        'slope': ["Upsloping", "Flat", "Downsloping"].index(slope),
        'ca': ca,
        'thal': ["Normal", "Fixed defect", "Reversible defect", "Unknown"].index(thal)
    }

    input_df = pd.DataFrame([input_dict])

    if st.sidebar.button("Predict"):
        prediction, probability = predict_heart_disease(input_df)

        st.subheader("Prediction Result")
        if prediction == 1:
            st.error(f"High Risk of Heart Disease (Probability: {probability:.2%})")
            st.write("The model predicts this patient is at risk of heart disease. Please consult a cardiologist.")
        else:
            st.success(f"Low Risk of Heart Disease (Probability: {1-probability:.2%})")
            st.write("The model predicts this patient is not at significant risk based on the provided information.")

if __name__ == "__main__":
    main()